package algorithm_journey.class048;

/**
 * @author: Agony
 * @create: 2024/7/21 16:34
 * @describe:
 * @link:
 */
public class Code05_StrongestForceField {

    // todo

    // 最强祝福力场

    // 思路

    // 1. 转换
    // 原始数据(x,y,r) : (x,y) -> 原点坐标；r -> 边长
    // 扩大处理：相对位置不会变化，处理了小数问题
    // -> x左=2*x-r
    // -> x右=2*x+r
    // -> y上=2*y+r
    // -> y下=2*y-r
    //
    // 2. 离散化处理
    // 数据重新编号，如果某个力场边长很大，如10万，那么准备长度为10万的数组显然不现实
    // 因此，如果有n个力场，那么我在x方向上准备 2n 长度的数组用来收集边长
    // y方向同理
    // 将上面转换的值用 int[] xs、int[] ys 收集起来
    //
    // 设计函数 int sort(int[] arr) 实现：将x、y方向的数组收集好之后，排序去重，返回有效长度
    //
    // 3. 差分处理
    // 3.1 设计函数 int rank(int[] arr, long v, int size) -> 用二分搜索实现
    // return -> v 在数组中的编号
    // arr -> 有序数组，无重复值
    // v -> 在数组中的某一个值
    // size -> 数组的有效长度
    //
    // 3.2 准备差分数组
    // 遍历各个力场，找到该力场的左上角(a,b)，右下角(c,d) -> (调用 rank 函数，返回编号)
    // a：x的左边界
    // b：y的下边界
    // c：x的右边界
    // d：y的上边界
    // 因为差分是从左往右增加，从上往下增加，坐标轴是从下网上增加，相当于沿x翻转一下
    //
    // 3.3 差分处理
    // 力场强度就是区域和最大值
    //
    //
    //
    // 总体思路：
    // 首项将提供数组坐标转换 用 xs、ys 收集
    // 调用 sort 函数排序去重并返回有效长度
    // 新建差分数组，遍历提供数组
    // 调用 rank 函数得到 (a,b) 和 (c,d)
    // 差分处理
    // build处理，得到二维区域和
    // 返回区域和最大值

}
