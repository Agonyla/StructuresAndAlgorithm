package algorithm_journey.class068;

/**
 * @author: Agony
 * @create: 2024/9/6 11:22
 * @describe:
 * @link:
 */
public class Code03_InterleavingString {

    // todo

    // 交错字符串
    //
    // 动态规划
    // 首先判断三个字符串的长度能不能对的上
    // 设计 boolean[][] dp = new boolean[][]
    // dp[i][j] 表示 s1[0...i-1] 和 s2[0...j-1] 能不能交错组合成 s3[0...i+j-1]个
    // 情况分析：
    // 1. s1[i-1]==s3[i+j-1] (s3最后一个字符来自于s1)
    // -> dp[i-1][j] (用s1[0...i-2] 和 s2[0...j-1] 能不能交错组合成 s3[0...i+j-2])
    // 2. s2[j-1]==s3[i+j-1] (s3最后一个字符来自于s2)
    // -> dp[i][j-1] (用s1[0...i-1] 和 s2[0...j-2] 能不能交错组合成 s3[0...i+j-2])
    // 两种情况有一种成立就是true，都不成立就是false
    // 位置依赖分析：
    // (i,j) 依赖 (i-1, j) (i, j-1) -> 每一个位置都依赖上边和左边的位置
    // 填表顺序：
    // 从左往下，从上往下
    // 特殊位置分析：
    // 第0行，s1字符为空，s3全来自s2 -> 直接判断s2，s3每一个位置是否相等
    // 第0列，s2字符为空，s3全来自s1 -> 直接判断s1，s3每一个位置是否相等
    //
    // 动态规划 + 空间压缩
    // 一维代替二维
    // 简单，之前有涉及到
    
}
