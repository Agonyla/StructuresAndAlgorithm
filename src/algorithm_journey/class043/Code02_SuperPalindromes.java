package algorithm_journey.class043;

/**
 * @author: Agony
 * @create: 2024/7/9 09:17
 * @describe:
 * @link:
 */
public class Code02_SuperPalindromes {


    // todo

    // 超级回文数的数目

    // 思路
    // 题目给的数据量位 10^18, 如果直接遍历，数据量太大了，肯定会超时
    // 直接在原数据量上开根号，在 1-10^9 上遍历，还是有点大
    // 枚举前一半的数据状况，它是基础长度还是偶数长度的回文
    // 如，前一半的数据状况为 123，它的回文有
    // a = 12321 和 b = 123321
    // 然后a和b平方判断是否在题目给出的范围上，再判断平方后的结果是否是回文
    // -> 将规模缩小到了 10^5
    // 以奇数长度的回文不超过 根号x的限制
    // 如 题目给出范围为 x=10^10
    // 根号x=10^5
    // seed=123
    // 奇数长度 12321 -> 10^5
    // 偶数长度 123321 -> 10^6
    // 此时不能停下，还要继续
    // seed=124 -> 奇数长度 12421，仍然在 10^5 范围内

    // 生成奇数长度的回文 123 为例，奇数长度需要先除10，然后和偶数一样
    // ans=123
    // tmp = 123
    // /10 得到 tmp=12
    // %10 -> 2
    // ans = ans * 10 + 2 -> 1232
    // tmp=12
    // /10 -> tmp=1
    // %10 -> 1
    // ans = ans * 10 + 1 -> 12321

    // 生成偶数唱的回文 123 为例
    // tmp=123,ans=123
    // tmp%10 -> 3
    // ans = ans *10+3 = 1233
    // tmp=tmp/10
    // ...

    // 判断回文
    // 1. 可以直接转成字符串然后判断
    // 2.
    // 如 num=52725
    // 先得到一个和num长度一致的offset=10000
    // num/offset -> 5
    // num%10 -> 5
    // 首位一致
    // num=(num%offset)/10 = 272
    // offset=offset/100 = 100
    // num/offset -> 2
    // num%10 -> 2
    // 首位一致
    // num=(num%offset)/10 = 7
    // offset=offset/100 = 1
    // num/offset -> 7
    // num%10 -> 7
    // 一致

    // num=527725
    // offset=100000
    // num=2772
    // offset=1000
    // num=77
    // offset=10
    // num=0

}
